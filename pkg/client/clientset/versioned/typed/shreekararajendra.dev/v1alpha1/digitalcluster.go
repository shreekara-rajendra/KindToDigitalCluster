// Copyright 2025 Shreekara Rajendra
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	context "context"

	shreekararajendradevv1alpha1 "github.com/shreekara-rajendra/KindToDigitalOcean/pkg/apis/shreekararajendra.dev/v1alpha1"
	scheme "github.com/shreekara-rajendra/KindToDigitalOcean/pkg/client/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// DigitalClustersGetter has a method to return a DigitalClusterInterface.
// A group's client should implement this interface.
type DigitalClustersGetter interface {
	DigitalClusters(namespace string) DigitalClusterInterface
}

// DigitalClusterInterface has methods to work with DigitalCluster resources.
type DigitalClusterInterface interface {
	Create(ctx context.Context, digitalCluster *shreekararajendradevv1alpha1.DigitalCluster, opts v1.CreateOptions) (*shreekararajendradevv1alpha1.DigitalCluster, error)
	Update(ctx context.Context, digitalCluster *shreekararajendradevv1alpha1.DigitalCluster, opts v1.UpdateOptions) (*shreekararajendradevv1alpha1.DigitalCluster, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*shreekararajendradevv1alpha1.DigitalCluster, error)
	List(ctx context.Context, opts v1.ListOptions) (*shreekararajendradevv1alpha1.DigitalClusterList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *shreekararajendradevv1alpha1.DigitalCluster, err error)
	DigitalClusterExpansion
}

// digitalClusters implements DigitalClusterInterface
type digitalClusters struct {
	*gentype.ClientWithList[*shreekararajendradevv1alpha1.DigitalCluster, *shreekararajendradevv1alpha1.DigitalClusterList]
}

// newDigitalClusters returns a DigitalClusters
func newDigitalClusters(c *ShreekararajendraV1alpha1Client, namespace string) *digitalClusters {
	return &digitalClusters{
		gentype.NewClientWithList[*shreekararajendradevv1alpha1.DigitalCluster, *shreekararajendradevv1alpha1.DigitalClusterList](
			"digitalclusters",
			c.RESTClient(),
			scheme.ParameterCodec,
			namespace,
			func() *shreekararajendradevv1alpha1.DigitalCluster {
				return &shreekararajendradevv1alpha1.DigitalCluster{}
			},
			func() *shreekararajendradevv1alpha1.DigitalClusterList {
				return &shreekararajendradevv1alpha1.DigitalClusterList{}
			},
		),
	}
}
