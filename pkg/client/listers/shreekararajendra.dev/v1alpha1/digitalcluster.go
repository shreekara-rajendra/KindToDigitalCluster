// Copyright 2025 Shreekara Rajendra
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	shreekararajendradevv1alpha1 "github.com/shreekara-rajendra/KindToDigitalOcean/pkg/apis/shreekararajendra.dev/v1alpha1"
	labels "k8s.io/apimachinery/pkg/labels"
	listers "k8s.io/client-go/listers"
	cache "k8s.io/client-go/tools/cache"
)

// DigitalClusterLister helps list DigitalClusters.
// All objects returned here must be treated as read-only.
type DigitalClusterLister interface {
	// List lists all DigitalClusters in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*shreekararajendradevv1alpha1.DigitalCluster, err error)
	// DigitalClusters returns an object that can list and get DigitalClusters.
	DigitalClusters(namespace string) DigitalClusterNamespaceLister
	DigitalClusterListerExpansion
}

// digitalClusterLister implements the DigitalClusterLister interface.
type digitalClusterLister struct {
	listers.ResourceIndexer[*shreekararajendradevv1alpha1.DigitalCluster]
}

// NewDigitalClusterLister returns a new DigitalClusterLister.
func NewDigitalClusterLister(indexer cache.Indexer) DigitalClusterLister {
	return &digitalClusterLister{listers.New[*shreekararajendradevv1alpha1.DigitalCluster](indexer, shreekararajendradevv1alpha1.Resource("digitalcluster"))}
}

// DigitalClusters returns an object that can list and get DigitalClusters.
func (s *digitalClusterLister) DigitalClusters(namespace string) DigitalClusterNamespaceLister {
	return digitalClusterNamespaceLister{listers.NewNamespaced[*shreekararajendradevv1alpha1.DigitalCluster](s.ResourceIndexer, namespace)}
}

// DigitalClusterNamespaceLister helps list and get DigitalClusters.
// All objects returned here must be treated as read-only.
type DigitalClusterNamespaceLister interface {
	// List lists all DigitalClusters in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*shreekararajendradevv1alpha1.DigitalCluster, err error)
	// Get retrieves the DigitalCluster from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*shreekararajendradevv1alpha1.DigitalCluster, error)
	DigitalClusterNamespaceListerExpansion
}

// digitalClusterNamespaceLister implements the DigitalClusterNamespaceLister
// interface.
type digitalClusterNamespaceLister struct {
	listers.ResourceIndexer[*shreekararajendradevv1alpha1.DigitalCluster]
}
